- ssr antipattern article

- article - css arrow and shadow

- Article URL parsing https://twitter.com/jaffathecake/status/969534845050335232?s=20 a href trick, nodejs compatibility implementation, isomorphic polyfill package.

- free pub sub in browser (obrazky.cz)

- chmod

- clanek textbox - offline support, localstorage na zapamatovani

- http authentication
  - WWW-Authenticate
  - Proxy-Authenticate

- kb v KiB

- macbook pro switch
  - tak studeny po ranu ze jsem si parkrat musel po ranu zahrat nejakou 3d hru aby se trochu zahral
  - keyboard
    - annoyingly low key travel, you get used to it but never stopped feeling "wrong"
    - retarded arrow keys, up and down is half size
    - missing keys like delete pageup down - annoying, you need to learn more gestures, but probably ok
    - media keys instead of function keys
      - i like this, i use volume up/down next track way more than function keys, so i like that this is default. And in reality even on windows you would not miss them because what function keys are you really using
        - f5 - cmd/control + r doest the refresh also
        - midnight commander, this is where you use them the most and it is little annoying
    - completly different keyboard layout - i like that the more common gestures loke copy and paste ale easier to reach (command is where alt is on regular keyboard), so your hands do not hurt as much compared to regular keyboards, but i still get confused and have no idea when to use command/option or control.
    - system keyboards do not fucking match what i have on keyboard backtick key is switched with backslash key, what the fuck??
  - regular mouses do not fucking work out of the box, every special key is mapped middle mouse button so when i plugged my mouse with back button it did nothing - this even works on Linux out of the box.
  - speakers - really good
  - window management
    - suprisingly i like the fullscreen, i thought it was super retarded but it actually made me like and use multiple desktops (i tried this on windows and linux and always went back to 1 workplace)
    - there is no maximize button like on windows or linux, so you see most users using 60% of the screen when only using one app - because there is no fucking maximize button, only fullscreen button which is not what you want most of the time. fortunately there is great app called Magnet, that does exactly this
  - macos
    - notification centre - just as useless as on windows
    - time - when you click on time in top bar it does not expand to small month calendar like on Win/Linux, annoying since i got used to this feature
    - sound in top bar - it only expands to volume bar, on Linux it shoved spotify controls and on windows you could expand to sound mixed of all apps playing sound
  - usb-c annoying, you need adapter for anything
    - there are all in one adapters that solve this but they are expensive ~70USD
    - do not buy cheap ones, they might not work, i brought some and when i plugged it in, wifi stopped working because it interfired with usb3 and 2.4ghz wifi - appearently this is because macos is from metal and there is not as much protection to filter this interference (wtf), so it will probably work with other computers but not on your mac. So you either buy more expensive one or you wrap the hub in aluminium foil (this was actually recommnended on some macos forums, wtf??)
  - app store
    - super slow
    - slightly more useful than windows store
  - dmg
    - i like that it is sandboxed until you drag it into the applications folder
    - the common drag app to applications folder is fucked up if you enable displaying dotfiles in finder
  - finder
    - no go up one folder button (wtf??), there is cmd+up shortcut, but still wtf?
    - way worse than windows finder, which actually got ok over time
    - it does not tell you where you are in the folder structure, you can add special button that kinda tells you but you still need to click it to find you where you are
    - enter fakin renames instead of opening the folder / app, wtf?? i am opening 100x more than renaming so wtf? if you want to open you either need to click on your mouse or you need to learn cmd+o shortcut
    - space does quick preview of the file, pretty nice
    - when you open picture in macos default image viewer app called "Preview" it does not allow cycling to next/previous image - what the actuall fuck??
      - you can press the space to shou quick preview, this is pretty nice, but again does not allow you to cycle between images, you actually need to select more images and then press space, wtf??
      - there is special cover flow view type that actually does the image cycling and is pretty nice, better than windows and linux
    - it created the .DS_Store file all over the place in every fucking directory you touch with this program.
    - creating new folder is ridiculous, you cant actually click on folder and tell it create new directory
      - you either need to find empty row (which is top level, you might want to create directory somewhere nested) and right click new directory
      - or you need to click on action button at the top and select create directory - wich then proceeds to crate not in the directory you selected but in the fucking top level, what the fuck??
  - fullscreen
    - really cool, when you play fullscreen game you can smoothly switch to another desktop with three fingers swipe or control+left/right
  - touchpad
    - nice
    - dont mind the bigger size - no problems when typing
    - no buttons - ok and sometimes easier to use for the easy stuff (clicking with right mouse button on link to open in new window). but for anything more serious (dragging file/folder between windows) it is worse - and way less reliable
  - office suite
    - free comapred to windows so that is really nice
    - simpler and easier to use than office it seemed, i used it for the first time and the stuf i wanted to do in the Numbers app were usualy very easy to find, i am not saying that the simple stuff I do is hard in office, but it seemed easier in Apple suite. Nice
  - for non profesional work (emails, calendar, web browser stuff) macos feels nicer compared to other 2 systems, trackpack gestures are really nice. but once you start doing some more serious stuff the new/weirh keyboard layout and other unusual stuff starts getting in the way
  - you need to download some 3rd party software to open android phones, wtf???

- todos apps mostly useless - google calendar

- CORS hlavicky
  - co vsechno musi backend vracet
  - k cemu to vubec je
  - je potreba neco navic u postu?
  - options request
  - ukazka cors proxy?

- element
  - viewport size
    - zoomed in?
  - obrazky.cz repo - there will be good code examples
  - dimensions
  - is visible
  - page size

- Create React app, experiences
  - React App Rewired
  - rozdeleni na vice appek (debug/normal)
  - autoprefixer
  - obecne veci z Krastyho

- union type concept from elm
  - explain the type
  - ELM example
  - JS example

- dimension ration
  - LESS
      - .u-dimension-ratio (@ratio) {
        width: 100%;
        height: 0;
        padding-bottom: unit(100 / @ratio, %);
      }
  - React component with pure CSS
  - Pure CSS solution with Suit?
  - How it works - height 0, why padding with percentages...

- time tag
  <time
    class="Article-datetime"
    title="{{ metadata.dateLastUpdate | fullDate }}"
    datetime="{{ metadata.dateLastUpdate | datetimeAttribute }}"
    data-date-convert
  >
    {{ metadata.dateLastUpdate | fullDate }}
  </time>

- specifying styles for text
  - default styles (p, h1 has margin)
  - evolution:
    - typography variables, mixins
    - suit/bem
  - react:
    - suit/bem
    - Text component from Calendar project
      - can be used outside of react in Bem/SuitCSS
  - steidas article

- gulp

- local storage
  - localStorage.set('key', 1) vs localStorage.key = 1
  - get the size of local storage
  - size overflow error

- unicode box drawing characters
  - https://en.wikipedia.org/wiki/Box-drawing_character
  - use line-height: 0 so the vertical lines align

- url parts

- semicolons vs no semicolons
  https://www.youtube.com/watch?v=gsfbh17Ax9I
  http://standardjs.com/
  Xo
  https://github.com/sindresorhus/xo#space

  Es6 destruction problems

  [a, b] = something();

  Here's one specific case to watch for:
  alert('hi')
  (function () { var x = 1 })()
  Gets treated as:
  alert('hi')(function () { var x = 1 })()

  From <https://github.com/feross/standard/issues/5>

  They can be substituted by one simpler rule:
    • Always put semicolons between statements.
  The “never start a line with ( or [” rule is very arbitrary.
  It is only going to get worse with ES6 where
  [a, b] = something();
  is a valid destructuring construction.
  Isn't it strange to write
  { a, b } = something()
  ;[a, b] = something()
  thus making code less uniform, if you can make it more uniform by just writing semicolons?
  { a, b } = something();
  [a, b] = something();

  From <https://github.com/feross/standard/issues/78>

  Na druhou stranu

  For example, you have to remember to not do this:

  function () {
  };
  But remember to use them here:
  var obj = {
  };

  From <https://github.com/feross/standard/issues/78>


  Statistika kolik lidí používá no semicollon

  https://www.youtube.com/watch?v=Qlr-FGbhKaI

- async component loading
  - https://github.com/thejameskyle/react-loadable

- images done right
  - width & height properly set with img tags
  - responsive
    - width 100% height auto
  - sizes are properly set event on mobile
    - mixin for 16:9 size

- article optional array/object fields - sbread operator and before spread operator

- bash script basics
  - shebang
  - chmod u+x file
  - set -e
  - variables
  - cd to current directory
  - source file vs ./file
  - if else
  - functions
  - cli arguments
  - running stuff in background &
  - capturing pid and then killing background stuff

- CORS
  - CORS http requests
    - with credentials
  - headers
  - https://github.com/pillarjs/understanding-csrf/blob/master/README.md
  - simple cors proxy
    #!/usr/bin/env node

    const request = require('request')
    const express = require('express')
    const bodyParser = require('body-parser')
    const cors = require('cors')

    const port = process.env.REACT_APP_DEV_PROXY_PORT || 3001

    const app = express()
    app.use(bodyParser.json())
    app.use(
      cors({
        origin: (origin, callback) => callback(null, true),
        optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204
      })
    )

    app.post('/', function (req, res) {
      const origin = req.get('origin')

      // TODO: might not be needed in the future as soon as dev api will stop
      // returning Access-Control-Allow-Origin header
      res.setHeader('Access-Control-Allow-Origin', origin)

      request({
        method: 'POST',
        url: req.body.apiUrl,
        json: true,
        body: {
          plugins: req.body.apiModules || [],
          url: req.body.queryUrl
        }
      })
        .on('response', response => {
          if (response.statusCode === 204) {
            response.statusCode = 200
          }

          // TODO: might not be needed in the future as soon as dev api will stop
          // returning Access-Control-Allow-Origin header
          response.headers['Access-Control-Allow-Origin'] = origin
        })
        .on('error', err => console.error('[PROXY]', err))
        .pipe(res)
    })

    app.listen(port)

- determine lightness of color
  - http://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color/24213274#24213274

- what every page should contain
  - <html lang="cs">
  - <meta charset="utf-8">
  - <meta name="viewport" content="width=device-width,initial-scale=1">
  - css border box reset
  - css body margin 0 stuff?
  - maybe mention
    - <title>Je čas.cz – moderní tvorba webových stránek</title>
    - <meta name="description" content="Poznámky o moderním webdesignu, hotová řešení, experimenty a návody.">

- web video
  - how to record on linux
    - vokoscreen
    - kdenlive
  - how to display in page
    - video element stuff

- hover image preloading
  - how browser decides what is fetched
  - js to preload images

- debian packaging introduction
  - basic packaging of static files
  - running some script during packaging (makefile override)
  - how dependencies work
  - how installation work

- JQ

- cross origin
  - why it was introduces
  - security limitations of responding *
  - proxy workaround

- cryptographically secure random number
  https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba
  ## Cryptographic randomness

  The `window.crypto.getRandomValues()` function lets you get cryptographically strong random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning).

  This function takes TypedArray of certain size and fill it with random numbers in range of the typed array, eg if it is 8Bit array, values will be between 0-255.

  ```js
  const randomNumber = window.crypto.getRandomValues(new Uint8Array(1))[0]
  ```

  To guarantee enough performance, implementations are not using a truly random number generator, but they are using a pseudo-random number generator seeded with a value with enough entropy. The PRNG used differs from one implementation to the other but is suitable for cryptographic usages. Implementations are also required to use a seed with enough entropy, like a system-level entropy source.

  var cryptoStor = new Uint16Array(8);
  (In this case, we’re creating an array with eight different slots that can each contain an unsigned 16-bit integer. Other interger options include Int8Array, Uint8Array, int16Array, Int32Array and Uint32Array.

  Then, fill the array with random numbers of the defined type:

  window.crypto.getRandomValues(cryptoStor);
  Showing the collected values in the console:

  > [43484, 57947, 46691, 49849, 24272, 11827, 28203, 17423]
  The Web Cryptography API has good support in modern browsers, although it is vendor prefixed in some cases.

  - If you want numbers in certain range, you might do +min and %max, but that might leave uneven distribution. Add example code where we just ask for new number again.

  ```js
  function generateCryptoRandomNumber (min, max) {
    const distance = max - min
    const maxDistance = 2 ** 32 - 1

    if (distance > maxDistance) throw new Error('Maximum is too big')

    let randomNumber
    do  {
      randomNumber = window.crypto.getRandomValues(new Uint32Array(1))[0]
    } while (randomNumber >= maxDistance - (maxDistance % distance))

    return randomNumber % (distance + 1) + min
  }

  console.log(generateCryptoRandomNumber(1, 100))
  ```
