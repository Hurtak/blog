- common mistakes in naming
  - parameter vs argument
  - pararell vs serial
  - find other examples - also I should have something in my notes

- async component loading
  - https://github.com/thejameskyle/react-loadable

- images done right
  - width & height properly set with img tags
  - responsive
    - width 100% height auto
  - sizes are properly set event on mobile
    - mixin for 16:9 size

- article optional array/object fields - sbread operator and before spread operator

- bash script basics
  - shebang
  - chmod u+x file
  - set -e
  - variables
  - cd to current directory
  - source file vs ./file
  - if else
  - functions
  - cli arguments
  - running stuff in background &
  - capturing pid and then killing background stuff

- CORS
  - CORS http requests
    - with credentials
  - headers
  - https://github.com/pillarjs/understanding-csrf/blob/master/README.md
  - simple cors proxy
    #!/usr/bin/env node

    const request = require('request')
    const express = require('express')
    const bodyParser = require('body-parser')
    const cors = require('cors')

    const port = process.env.REACT_APP_DEV_PROXY_PORT || 3001

    const app = express()
    app.use(bodyParser.json())
    app.use(
      cors({
        origin: (origin, callback) => callback(null, true),
        optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204
      })
    )

    app.post('/', function (req, res) {
      const origin = req.get('origin')

      // TODO: might not be needed in the future as soon as dev api will stop
      // returning Access-Control-Allow-Origin header
      res.setHeader('Access-Control-Allow-Origin', origin)

      request({
        method: 'POST',
        url: req.body.apiUrl,
        json: true,
        body: {
          plugins: req.body.apiModules || [],
          url: req.body.queryUrl
        }
      })
        .on('response', response => {
          if (response.statusCode === 204) {
            response.statusCode = 200
          }

          // TODO: might not be needed in the future as soon as dev api will stop
          // returning Access-Control-Allow-Origin header
          response.headers['Access-Control-Allow-Origin'] = origin
        })
        .on('error', err => console.error('[PROXY]', err))
        .pipe(res)
    })

    app.listen(port)

- determine lightness of color
  - http://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color/24213274#24213274

- what every page should contain
  - <html lang="cs">
  - <meta charset="utf-8">
  - <meta name="viewport" content="width=device-width,initial-scale=1">
  - css border box reset
  - css body margin 0 stuff?
  - maybe mention
    - <title>Je čas.cz – moderní tvorba webových stránek</title>
    - <meta name="description" content="Poznámky o moderním webdesignu, hotová řešení, experimenty a návody.">

- web video
  - how to record on linux
    - vokoscreen
    - kdenlive
  - how to display in page
    - video element stuff

- hover image preloading
  - how browser decides what is fetched
  - js to preload images

- debian packaging introduction
  - basic packaging of static files
  - running some script during packaging (makefile override)
  - how dependencies work
  - how installation work

- JQ

- cross origin
  - why it was introduces
  - security limitations of responding *
  - proxy workaround
