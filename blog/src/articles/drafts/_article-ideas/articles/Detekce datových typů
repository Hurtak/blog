
Null
	var === null
String
	99% solution
		typeof var === 'string' // doesent catch new String
	100% solution
		typeof var === 'string' || myVar instanceof String
			Catches: New String('string')
			http://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string

		Object.prototype.toString.call(var) === "[object String]"
Array
	100% solution
		Array.isArray(var) // IE >= 9

	Older browsers
		Polyfill:
		Object.prototype.toString.call(var) === "[object Array]" // for older browsers

Number
	99% solution
		typeof var === 'number' // doesent catch NaN
	100% solution
		isNumber(obj) { return !isNaN(parseFloat(var)) }
		Object.prototype.toString.call(var) doesent catch NaN


	Integer
		100% solution

Boolean
	99% solution
		typeof var === 'boolean' // doesent catch new Boolean()
	100% solution
		Object.prototype.toString.call(var)

Function
	99% solution
		typeof var === 'function // This won't work for native functions in IE8. typeof document.getElementById returns object.
	100% solution
		Object.prototype.toString.call(var) == '[object Function]';

NaN
	> isNaN(NaN)
true
> isNaN(33)
false

	From <http://speakingjs.com/es5/ch11.html>

	> isNaN('xyz')
true

	From <http://speakingjs.com/es5/ch11.html>

	function myIsNaN(value) {
    return typeof value === 'number' && isNaN(value);
}
	Alternatively, you can check whether the value is unequal to itself (as NaN is the only value with this trait). But that is less self-explanatory:
	function myIsNaN(value) {
    return value !== value;
}

	From <http://speakingjs.com/es5/ch11.html>

	Note that this behavior is dictated by IEEE 754. As noted in Section 7.11, “Details of comparison predicates”:[15]
	Every NaN shall compare unordered with everything, including itself.

	From <http://speakingjs.com/es5/ch11.html>

	Checking for Infinity
	Strict and lenient equality work fine for Infinity:
	> var x = Infinity;
> x === Infinity
true
	Additionally, the global function isFinite() allows you to check whether a value is an actual number (neither infinite nor NaN):
	> isFinite(5)
true
> isFinite(Infinity)
false
> isFinite(NaN)
false



The problems arise when it comes to scripting in multi-frame DOM environments. In a nutshell, Array objects created within one iframe do not share [[Prototype]]’s with arrays created within another iframe. Their constructors are different objects and so both instanceof and constructor checks fail:

Z <http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/>







U všecho zmínit jak nový es6 Number.isNaN Number.isFinite Number.isFinite




Je negativní nula

	let isNegativeZero = x => x === 0 && 1 / x < 0;
	const isNegativeZero = x => typeof x === 'number' && 1 / x === -Infinity;

	From <http://www.codewars.com/kata/563c39f92f7bed9572000011/solutions/javascript>



Je funkce

	http://stackoverflow.com/questions/5999998/how-can-i-check-if-a-javascript-variable-is-function-type



TODO
	Date
		variable instanceof Date

	Take a look at lodash with its isXXX functions

	Mention lodash


